import sys

def load_field_value(field_name, word_list, verbose = True):
    """Loads value corresponding to field_name from a list of words"""
    try:
        field_index = word_list.index(field_name + ":") + 1
    except:
        if verbose:
            print field_name + ": ", 'not found in ', word_list
        return None
    else:
        return word_list[field_index]

class Parameter(object):
    name = None
    typename = None
    optional_default = None

    def __init__(self, word_list):
        """Sets up Parameter object using information from a list of words"""
        self.name = load_field_value("name", word_list)
        self.typename = load_field_value("typename", word_list)
        self.optional_default = load_field_value("default", word_list, verbose = False)

    def is_fully_defined(self):
        """Checks whether enough information is available to write c++ code."""
        return self.name is not None and self.typename is not None

    def write_load_code(self):
        """Writes the c++ code which loads a value from param file."""
        if self.is_fully_defined():
            cpp_code = '    pp.load("' + self.name + '", ' + self.name
            if self.optional_default is not None:
                    cpp_code += ', ' + self.optional_default
            cpp_code += ');\n'
            return cpp_code
        else:
            return ""

    def write_define_code(self):
        """Writes the c++ code which declares the variable."""
        if self.is_fully_defined():
            cpp_code = self.typename + " " + self.name + ';\n'
            return cpp_code
        else:
            return ""

def generate_cpp_code(config_data):
    """Generates c++ code for parameter loading given configuration data."""
    load_code = ''
    define_code = ''

    for config_line in config_data.splitlines():
        word_list = config_line.split()
        if word_list != [] and word_list[0][0:2] != "//":
            parameter = Parameter(word_list)
            load_code += parameter.write_load_code()
            define_code += parameter.write_define_code()

    cpp_code = "void auto_read_params(GRParmParse& pp)\n{\n"
    cpp_code += load_code + "}\n\n" + define_code

    return cpp_code


if __name__ == "__main__":
    with open(sys.argv[1], 'r') as parameter_config_file:
        config_data = parameter_config_file.read()

    cpp_code = "//This file has been autogenerated from " + sys.argv[1] \
               + ".\n//Do not edit directly. " + \
               "Instead, edit the corresponding parameter list.\n\n"
    cpp_code += generate_cpp_code(config_data)
    with open(sys.argv[2], 'w') as cpp_output_file:
        cpp_output_file.write(cpp_code)
